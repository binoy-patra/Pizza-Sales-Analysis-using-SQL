-- Creating Database 
create database pizzahut;
-- Importing data into tables 
-- for pizzas and pizzatypes , we dont need to create table exernally. We can import data and create tables during importing. 
-- but for orders and order_detils table, for some datatype mismatchinh we need to create tables externally then we can import data. 

create table pizzahut.orders(
order_id int not null ,
order_date date not null,
order_time time not null,
primary key(order_id)
);

create table pizzahut.order_details(
order_details_id int not null,
order_id int not null ,
pizza_id text not null ,
quantity int not null ,
primary key(order_details_id));
-- once tables are created we can import data to them. 


-- -----------------------------------------------------------------
-- Basic:
-- Retrieve the total number of orders placed.
SELECT COUNT(order_id) AS Total_Number_Orders
 FROM pizzahut.orders ; 
 
-- Calculate the total revenue generated from pizza sales.
SELECT ROUND((SUM(P.price * O.quantity)),2) AS Total_Revenue
FROM pizzahut.pizzas P 
JOIN pizzahut.order_details O ON P.pizza_id= O.pizza_id;

-- Identify the highest-priced pizza.
SELECT PT.name AS Pizza_Name, P.price as Price
FROM pizzahut.pizzas P
JOIN pizzahut.pizza_types PT USING(pizza_type_id)
ORDER BY P.price DESC LIMIT 1;

-- Identify the lowest-priced pizza.
SELECT PT.name AS Pizza_Name, P.price as Price
FROM pizzahut.pizzas P
JOIN pizzahut.pizza_types PT USING(pizza_type_id)
ORDER BY P.price LIMIT 1;

-- Identify the most common pizza size ordered.
SELECT P.size, COUNT(O.order_id) AS OrdereCount
FROM pizzahut.order_details O
JOIN pizzahut.pizzas P USING(pizza_id)
GROUP BY P.size
ORDER BY OrdereCount DESC
LIMIT 1;

-- List the top 5 most ordered pizza types along with their quantities.
SELECT PT.name, SUM(O.quantity) AS QuantityOrdered
FROM pizzahut.pizza_types PT
JOIN pizzahut.pizzas P ON PT.pizza_type_id=P.pizza_type_id
JOIN pizzahut.order_details O ON P.pizza_id=O.pizza_id
GROUP BY PT.name
ORDER BY QuantityOrdered DESC 
LIMIT 5;

-- Retrive the Average order amount 
SELECT ROUND(SUM(OD.quantity * P.price) / COUNT(DISTINCT OD.order_id)) AS AvgOrderValue
FROM pizzahut.order_details OD 
JOIN pizzahut.pizzas P ON OD.pizza_id=P.pizza_id;

-- Retrive how many pizza have been sold 
SELECT SUM(OD.quantity) AS QuantitySold
FROM pizzahut.order_details OD;

-- ----------------------------------------------------------
-- Find the total quantity of each pizza category ordered.
SELECT PT.category, COUNT(DISTINCT O.order_id) AS NumberOrdered
FROM pizzahut.pizza_types PT
JOIN pizzahut.pizzas P ON PT.pizza_type_id=P.pizza_type_id
JOIN pizzahut.order_details O ON P.pizza_id=O.pizza_id
GROUP BY  PT.category
ORDER BY NumberOrdered DESC ;

-- Find the total quantity of each pizza category ordered.
SELECT PT.category, SUM(O.quantity) AS QuantityOrdered
FROM pizzahut.pizza_types PT
JOIN pizzahut.pizzas P ON PT.pizza_type_id=P.pizza_type_id
JOIN pizzahut.order_details O ON P.pizza_id=O.pizza_id
GROUP BY  PT.category
ORDER BY QuantityOrdered DESC ;

-- Find the total revenue generated by each pizza category ordered.
SELECT PT.category, ROUND(SUM(O.quantity * P.price)) AS Revenue
FROM pizzahut.pizza_types PT
JOIN pizzahut.pizzas P ON PT.pizza_type_id=P.pizza_type_id
JOIN pizzahut.order_details O ON P.pizza_id=O.pizza_id
GROUP BY  PT.category
ORDER BY Revenue DESC ;

-- --------------------------------------------------------------------------------
-- Find the total quantity of each pizza size ordered.
SELECT P.size, COUNT(DISTINCT O.order_id) AS NumberOrdered
FROM pizzahut.pizzas P 
JOIN pizzahut.order_details O ON P.pizza_id=O.pizza_id
GROUP BY  P.size
ORDER BY NumberOrdered DESC ;

-- Find the total quantity of each pizza category ordered.
SELECT P.size, SUM(O.quantity) AS QuantityOrdered
FROM pizzahut.pizzas P 
JOIN pizzahut.order_details O ON P.pizza_id=O.pizza_id
GROUP BY  P.size
ORDER BY QuantityOrdered DESC ;

-- Find the total revenue generated by each pizza category ordered.
SELECT P.size, ROUND(SUM(O.quantity * P.price)) AS Revenue
FROM pizzahut.pizzas P 
JOIN pizzahut.order_details O ON P.pizza_id=O.pizza_id
GROUP BY  P.size
ORDER BY Revenue DESC ;

-- ---------------------------------------------------------------------------------
-- Determine the distribution of orders by hour of the day.
SELECT HOUR(O.order_time) AS Hour, COUNT(O.order_id) OrderCount
FROM pizzahut.orders O 
GROUP BY Hour
ORDER BY Hour;

-- Determine the distribution of orders by day.
SELECT DAYNAME(O.order_date) AS OrderDay, COUNT(O.order_id) TotalOrder
FROM pizzahut.orders O 
GROUP BY OrderDay
ORDER BY TotalOrder;

-- Determine the distribution of orders by month.
SELECT MONTHNAME(O.order_date) AS MonthName, COUNT(O.order_id) TotalOrder
FROM pizzahut.orders O 
GROUP BY MonthName
ORDER BY TotalOrder;
-------------------------------------------------------------------

-- Join relevant tables to find the category-wise distribution of pizzas.
SELECT PT.category, COUNT(PT.name) AS PizzaType
FROM pizzahut.pizza_types PT
group by PT.category;

-- Group the orders by date and calculate the average number of pizzas ordered per day.
WITH CTE1 AS(SELECT O.order_date AS OrderDate,SUM(OD.quantity) AS QuantityOrdered
FROM pizzahut.orders O 
JOIN pizzahut.order_details OD USING(ORDER_ID)
GROUP BY OrderDate)
SELECT Round(avg(QuantityOrdered)) as AvgQuantity
FROM CTE1;

-- Determine the top 3 most ordered pizza types based on revenue.
SELECT PT.name, SUM(P.price * OD.quantity) AS Revenue
FROM pizzahut.pizza_types PT 
JOIN pizzahut.pizzas P ON PT.pizza_type_id=P.pizza_type_id
JOIN pizzahut.order_details OD ON P.pizza_id=OD.pizza_id
GROUP BY PT.name 
ORDER BY Revenue DESC
LIMIT 3;


----------------------------------------
-- Calculate the percentage contribution of each pizza type to total revenue.
WITH CTE1 AS (SELECT PT.category, 
round(SUM(P.price * OD.quantity),1) AS Category_wise_Revenue,
SUM(round(SUM(P.price * OD.quantity),1)) OVER() AS OverallRevenue
FROM pizzahut.pizza_types PT 
JOIN pizzahut.pizzas P ON PT.pizza_type_id=P.pizza_type_id
JOIN pizzahut.order_details OD ON P.pizza_id=OD.pizza_id
GROUP BY PT.category) 
SELECT CTE1.category AS PizzaCategory,
CTE1.Category_wise_Revenue, CTE1.OverallRevenue, 
ROUND(Category_wise_Revenue/OverallRevenue * 100,1) AS PercentContribution
FROM CTE1
ORDER BY PercentContribution DESC;

-- Analyze the cumulative revenue generated over time.
SELECT O.order_date, 
ROUND(SUM(P.price * OD.quantity)) AS PerDayRevenue,
SUM(ROUND(SUM(P.price * OD.quantity))) OVER(ORDER BY O.order_date) AS RunningTotal
FROM pizzahut.order_details OD 
JOIN pizzahut.orders O ON OD.order_id= O.order_id
JOIN pizzahut.pizzas P ON P.pizza_id=OD.pizza_id
GROUP BY O.order_date;

-- Determine the top 3 most ordered pizza types based on revenue for each pizza category.
SELECT * FROM
(SELECT PT.category,PT.name, ROUND(SUM(P.price * OD.quantity)) AS Revenue,
DENSE_RANK() OVER(partition by PT.category ORDER BY SUM(P.price * OD.quantity) DESC) Ranking
FROM pizzahut.pizza_types PT 
JOIN pizzahut.pizzas P ON PT.pizza_type_id=P.pizza_type_id
JOIN pizzahut.order_details OD ON P.pizza_id=OD.pizza_id
GROUP BY PT.category,PT.name) AS TEMP
WHERE TEMP.Ranking BETWEEN 1 AND 3;
